import asyncio
import logging
import datetime
import pytz
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from supabase import create_client
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN_TELEGRAM = os.getenv("TOKEN_TELEGRAM")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
SERVICE_ACCOUNT_FILE = os.getenv("SERVICE_ACCOUNT_FILE")
smtp_email = os.getenv("SMTP_EMAIL")
smtp_password = os.getenv("SMTP_PASSWORD")

if not all([TOKEN_TELEGRAM, SUPABASE_URL, SUPABASE_KEY, SERVICE_ACCOUNT_FILE]):
    raise ValueError("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!")

CALENDAR_ID = {}

bot = Bot(token=TOKEN_TELEGRAM)
dp = Dispatcher(storage=MemoryStorage())
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

creds = Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=["https://www.googleapis.com/auth/calendar"]
)
calendar_service = build("calendar", "v3", credentials=creds)

# === FSM ===
class AddMeeting(StatesGroup):
    calendar_choice = State()
    title = State()
    name = State()
    datetime = State()
    phone = State()
    comment = State()

class InviteParticipant(StatesGroup):
    waiting_for_email = State()


class SetCalendar(StatesGroup):
    input_url = State()
    input_name = State()

class EditCalendarName(StatesGroup):
    choose = State()
    new_name = State()
    delete_choose = State()
# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
main_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É")],
    [KeyboardButton(text="–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏")],
    [KeyboardButton(text="–ú–æ–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏")],
    [KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")],
], resize_keyboard=True)

cancel_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / –û—Ç–º–µ–Ω–∞")]
], resize_keyboard=True)

edit_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")],
    [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")],
    [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å")],
    [KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / –û—Ç–º–µ–Ω–∞")]
], resize_keyboard=True)

appointments_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
], resize_keyboard=True)

# === –ú–æ–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏ ===
@dp.message(F.text.lower() == "–º–æ–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏")
async def list_calendars(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    result = supabase.table("settings").select("*").eq("telegram_id", user_id).execute()

    if not result.data:
        keyboard = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")],
            [KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / –û—Ç–º–µ–Ω–∞")]
        ], resize_keyboard=True)

        return await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π.\n\n–•–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å?",
            reply_markup=keyboard
        )

    await state.update_data(calendar_list=result.data)
    text = "üìÖ –í–∞—à–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏:\n\n"
    for i, c in enumerate(result.data, 1):
        text += f"{i}) *{c['calendar_name']}*\n`{c['calendar_id']}`\n\n"

    await message.answer(text, parse_mode="Markdown", reply_markup=edit_menu)

@dp.message(F.text.lower() == "–∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
async def start_rename_calendar(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    result = supabase.table("settings").select("*").eq("telegram_id", user_id).execute()

    if not result.data:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.", reply_markup=main_menu)

    await state.update_data(calendar_list=result.data)
    await state.set_state(EditCalendarName.choose)

    buttons = [[KeyboardButton(text=c["calendar_name"])] for c in result.data]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons + [[KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å:", reply_markup=keyboard)

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è ===
@dp.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def set_calendar_start_from_menu(message: types.Message, state: FSMContext):
    await state.set_state(SetCalendar.input_url)
    await message.answer(
        """
üìò *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é Google –ö–∞–ª–µ–Ω–¥–∞—Ä—è:*

1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ [Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å](https://calendar.google.com)

2Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —á–µ—Ä–µ–∑:  
*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ–±–∞–≤–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚Üí –°–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å*

3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –Ω–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª *–î–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é*

4Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –ø–æ—á—Ç—É —Å –ø—Ä–∞–≤–∞–º–∏ *–†–µ–¥–∞–∫—Ç–æ—Ä*:  
`don-t-forget-crm-bot@dont-forget-bot-000.iam.gserviceaccount.com`

5Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª *–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è* ‚Üí –Ω–∞–π–¥–∏—Ç–µ –ø–æ–ª–µ *–ü—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ iCal*

6Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë —Å—é–¥–∞. –ü—Ä–∏–º–µ—Ä:  
`https://calendar.google.com/calendar/ical/.../basic.ics`
""",
        parse_mode="Markdown",
        reply_markup=cancel_menu
    )
# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ ===
@dp.message(F.text.lower() == "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
async def bot_info(message: types.Message):
    await message.answer(
        "ü§ñ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Don't Forget CRM Bot*\n\n"
        "–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∑–∞–Ω–µ—Å–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á –≤ Google Calendar –ø—Ä—è–º–æ –∏–∑ Telegram.\n\n"
        "üìå *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?*\n"
        "1. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Google Calendar —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª *–ú–æ–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏*.\n"
        "2. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É *–î–æ–±–∞–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É*, —á—Ç–æ–±—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ.\n"
        "3. –ú–æ–∂–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –≤—Å—Ç—Ä–µ—á–∏ —á–µ—Ä–µ–∑ *–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏*.\n"
        "4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø–æ email.\n\n"
        "üîπ –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / –û—Ç–º–µ–Ω–∞*.\n\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!",
        parse_mode="Markdown",
        reply_markup=main_menu
    )

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "Don't Forget CRM bot —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞–Ω–µ—Å–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á –≤ Google Calendar –ø—Ä—è–º–æ –∏–∑ telegram, —á—Ç–æ–±—ã —Ç—ã –Ω–µ –∑–∞–±—ã–ª –≤–Ω–µ—Å—Ç–∏ –≤—Å—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!.\n\n"        
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, —Å–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏ Google Calendar –≤ *–ú–æ–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏*, –∑–∞—Ç–µ–º —Ç—ã —Å–º–æ–∂–µ—à—å *–î–æ–±–∞–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É.*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu,
        parse_mode="Markdown"
    )


@dp.message(Command("cancel"))
@dp.message(F.text.lower().in_(["–æ—Ç–º–µ–Ω–∞", "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / –æ—Ç–º–µ–Ω–∞"]))
async def cancel_action(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=main_menu)

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è ===
@dp.message(F.text.lower() == "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def set_calendar_start(message: types.Message, state: FSMContext):
    await state.set_state(SetCalendar.input_url)
    await message.answer(
        """
üìò *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é Google –ö–∞–ª–µ–Ω–¥–∞—Ä—è:*

1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ [Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å](https://calendar.google.com)

2Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —á–µ—Ä–µ–∑:  
*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ–±–∞–≤–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚Üí –°–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å*

3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –Ω–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª *–î–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é*

4Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –ø–æ—á—Ç—É —Å –ø—Ä–∞–≤–∞–º–∏ *–†–µ–¥–∞–∫—Ç–æ—Ä*:  
`don-t-forget-crm-bot@dont-forget-bot-000.iam.gserviceaccount.com`

5Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª *–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è* ‚Üí –Ω–∞–π–¥–∏—Ç–µ –ø–æ–ª–µ *–ü—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ iCal*

6Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë —Å—é–¥–∞. –ü—Ä–∏–º–µ—Ä:  
`https://calendar.google.com/calendar/ical/.../basic.ics`
""",
        parse_mode="Markdown",
        reply_markup=cancel_menu
    )

@dp.message(SetCalendar.input_url)
async def receive_calendar_url(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    raw_input = message.text.strip()
    match = re.search(r"ical/([^/]+)", raw_input)
    calendar_id = match.group(1) if match else raw_input
    calendar_id = calendar_id.replace('%2540', '@').replace('%40', '@')

    try:
        exists = supabase.table("settings").select("*").match({
            "telegram_id": user_id,
            "calendar_id": calendar_id
        }).execute().data

        if exists:
            await state.clear()
            return await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=main_menu)

        await state.update_data(calendar_id=calendar_id)
        await state.set_state(SetCalendar.input_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:", reply_markup=cancel_menu)

    except Exception as e:
        await state.clear()
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}", reply_markup=main_menu)

@dp.message(SetCalendar.input_name)
async def receive_calendar_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    calendar_id = data["calendar_id"]
    calendar_name = message.text.strip()

    try:
        supabase.table("settings").insert({
            "telegram_id": user_id,
            "calendar_id": calendar_id,
            "calendar_name": calendar_name
        }).execute()
        await message.answer(f"‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å *{calendar_name}* –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode="Markdown", reply_markup=main_menu)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=main_menu)

    await state.clear()

# === –ú–æ–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏ ===
@dp.message(F.text.lower() == "–º–æ–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏")
async def list_calendars(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    result = supabase.table("settings").select("*").eq("telegram_id", user_id).execute()

    if not result.data:
        # –ï—Å–ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–∏—Ç—å
        keyboard = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å")],
            [KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / –û—Ç–º–µ–Ω–∞")]
        ], resize_keyboard=True)

        return await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π.\n\n–•–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å?",
            reply_markup=keyboard
        )

    # –ï—Å–ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏ –µ—Å—Ç—å ‚Äî –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏ –¥–µ–π—Å—Ç–≤–∏—è
    text = "üìÖ –í–∞—à–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏:\n\n"
    for i, c in enumerate(result.data, 1):
        text += f"{i}) *{c['calendar_name']}*\n`{c['calendar_id']}`\n\n"

    await message.answer(text, parse_mode="Markdown", reply_markup=edit_menu)

@dp.message(EditCalendarName.choose)
async def choose_calendar_to_rename(message: types.Message, state: FSMContext):
    data = await state.get_data()
    selected_name = message.text.strip()

    for c in data["calendar_list"]:
        if c["calendar_name"].lower() == selected_name.lower():
            await state.update_data(calendar_id=c["calendar_id"])
            await state.set_state(EditCalendarName.new_name)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:", reply_markup=cancel_menu)
            return

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")

@dp.message(EditCalendarName.new_name)
async def rename_calendar(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    new_name = message.text.strip()
    calendar_id = data["calendar_id"]

    try:
        supabase.table("settings").update({"calendar_name": new_name}).match({
            "telegram_id": user_id,
            "calendar_id": calendar_id
        }).execute()
        await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=main_menu)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏: {e}", reply_markup=main_menu)

    await state.clear()

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ ===
@dp.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É")
async def add_meeting_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    calendars = supabase.table("settings").select("*").eq("telegram_id", user_id).execute().data

    if not calendars:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å" —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
        keyboard = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å")],
            [KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / –û—Ç–º–µ–Ω–∞")]
        ], resize_keyboard=True)

        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—å.", reply_markup=keyboard)

    buttons = [[KeyboardButton(text=c["calendar_name"])] for c in calendars]
    await state.update_data(calendar_list=calendars)
    await state.set_state(AddMeeting.calendar_choice)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏:", reply_markup=ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True))

@dp.message(AddMeeting.calendar_choice)
async def select_calendar(message: types.Message, state: FSMContext):
    data = await state.get_data()
    selected = message.text.strip()
    for c in data["calendar_list"]:
        if c["calendar_name"].lower() == selected.lower():
            await state.update_data(calendar_id=c["calendar_id"])
            await state.set_state(AddMeeting.title)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:", reply_markup=cancel_menu)
            return
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫.")

@dp.message(AddMeeting.title)
async def get_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AddMeeting.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")

@dp.message(AddMeeting.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddMeeting.datetime)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (YYYY-MM-DD HH:MM):")

@dp.message(AddMeeting.datetime)
async def get_datetime(message: types.Message, state: FSMContext):
    try:
        datetime.datetime.strptime(message.text, "%Y-%m-%d %H:%M")
        await state.update_data(datetime=message.text)
        await state.set_state(AddMeeting.phone)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 2025-03-30 14:00")

@dp.message(AddMeeting.phone)
async def get_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()

    if not re.fullmatch(r"\+7\d{10}", phone):
        return await message.answer("‚ö†Ô∏è –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:")

    await state.update_data(phone=phone)
    await state.set_state(AddMeeting.comment)
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—Å—Ç—Ä–µ—á–µ:")

@dp.message(AddMeeting.comment)
async def get_comment(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await state.update_data(comment=message.text)
    data = await state.get_data()
    await state.clear()

    try:
        dt = pytz.timezone("Europe/Moscow").localize(datetime.datetime.strptime(data["datetime"], "%Y-%m-%d %H:%M"))

        client_result = supabase.table("clients").select("*").eq("telegram_id", user_id).execute().data
        if client_result:
            client = client_result[0]
        else:
            client = supabase.table("clients").insert({
                "name": data["name"],
                "telegram_id": user_id,
                "phone_number": data["phone"]
            }).execute().data[0]

        appointment = supabase.table("appointments").insert({
            "client_id": client["id"],
            "meeting_date_time": dt.isoformat(),
            "phone_number": data["phone"],
            "title": data["title"],
            "calendar_id": data["calendar_id"]  # –≤–æ—Ç —ç—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
        }).execute().data[0]

        event = {
            "summary": data["title"],
            "description": (
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {data['name']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
                f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment'] or '‚Äî'}"
            ),
            "start": {"dateTime": dt.isoformat(), "timeZone": "Europe/Moscow"},
            "end": {"dateTime": (dt + datetime.timedelta(hours=1)).isoformat(), "timeZone": "Europe/Moscow"}
        }

        created_event = calendar_service.events().insert(
            calendarId=data["calendar_id"],
            body=event
        ).execute()

        supabase.table("calendar_events").insert({
            "appointment_id": appointment["id"],
            "event_id": created_event["id"],
            "event_status": created_event["status"]
        }).execute()

        event_link = created_event.get("htmlLink", None)

        if event_link:
            await message.answer(
                f"‚úÖ –í—Å—Ç—Ä–µ—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                f"üìÖ [–û—Ç–∫—Ä—ã—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä–µ]({event_link})",
                parse_mode="Markdown",
                reply_markup=main_menu
            )
        else:
            await message.answer("‚úÖ –í—Å—Ç—Ä–µ—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –Ω–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞.", reply_markup=main_menu)

        # üîπ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        invite_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É",
                callback_data=f"invite:{appointment['id']}"
            )]
        ])
        await message.answer("–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É?", reply_markup=invite_keyboard)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏: {e}", reply_markup=main_menu)
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ ===
@dp.message(F.text.lower() == "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
async def bot_info(message: types.Message):
    await message.answer(
        "ü§ñ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Don't Forget CRM Bot*\n\n"
        "–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∑–∞–Ω–µ—Å–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á –≤ Google Calendar –ø—Ä—è–º–æ –∏–∑ Telegram.\n\n"
        "üìå *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?*\n"
        "1. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Google Calendar —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª *–ú–æ–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏*.\n"
        "2. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É *–î–æ–±–∞–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É*, —á—Ç–æ–±—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ.\n"
        "3. –ú–æ–∂–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –≤—Å—Ç—Ä–µ—á–∏ —á–µ—Ä–µ–∑ *–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏*.\n"
        "4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø–æ email.\n\n"
        "üîπ –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / –û—Ç–º–µ–Ω–∞*.\n\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!",
        parse_mode="Markdown",
        reply_markup=main_menu
    )

# === –ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏ (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª) ===
@dp.message(F.text.lower() == "–º–æ–∏ –≤—Å—Ç—Ä–µ—á–∏")
async def show_appointments(message: types.Message):
    user_id = message.from_user.id

    client_result = supabase.table("clients").select("id").eq("telegram_id", user_id).execute()
    if not client_result.data:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á.", reply_markup=appointments_menu)

    client_id = client_result.data[0]["id"]
    appointments = supabase.table("appointments").select("*").eq("client_id", client_id).execute().data

    if not appointments:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á.", reply_markup=appointments_menu)

    for app in appointments:
        from_zone = pytz.utc
        to_zone = pytz.timezone("Europe/Moscow")
        raw_time = app["meeting_date_time"]
        utc_dt = datetime.datetime.fromisoformat(raw_time.replace("Z", "+00:00"))
        moscow_dt = utc_dt.astimezone(to_zone)
        formatted_time = moscow_dt.strftime("%Y-%m-%d %H:%M")

        text = (
            f"üìÖ <b>{formatted_time}</b>\n"
            f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {app.get('title', '‚Äî')}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {app['phone_number']}"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", callback_data=f"invite:{app['id']}")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É", callback_data=f"delete_meeting:{app['id']}" )]
        ])

        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëÜ", reply_markup=appointments_menu)
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–∞–π—Ç–∞
@dp.callback_query(F.data.startswith("invite:"))
async def handle_invite_start(callback: types.CallbackQuery, state: FSMContext):
    appointment_id = int(callback.data.split(":")[1])
    await state.set_state(InviteParticipant.waiting_for_email)
    await state.update_data(appointment_id=appointment_id)

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ email —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:")
    await callback.answer()

# === –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ ===
@dp.callback_query(F.data.startswith("delete_meeting:"))
async def delete_meeting_callback(callback: types.CallbackQuery):
    meeting_id = int(callback.data.split(":")[1])
    user_message = ""

    try:
        # –ü–æ–ª—É—á–∞–µ–º event_id –∏ calendar_id
        event_data = supabase.table("calendar_events").select("*").eq("appointment_id", meeting_id).execute().data
        appointment_data = supabase.table("appointments").select("calendar_id").eq("id", meeting_id).execute().data

        if event_data and appointment_data:
            event_id = event_data[0]["event_id"]
            calendar_id = appointment_data[0]["calendar_id"]

            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏–∑ Google Calendar
            try:
                calendar_service.events().delete(calendarId=calendar_id, eventId=event_id).execute()
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Google Calendar: {e}")
                user_message += "‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—è.\n"

        # –£–¥–∞–ª—è–µ–º –∏–∑ Supabase
        supabase.table("calendar_events").delete().eq("appointment_id", meeting_id).execute()
        supabase.table("appointments").delete().eq("id", meeting_id).execute()

        user_message += "‚ùå –í—Å—Ç—Ä–µ—á–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
        await callback.message.edit_text(user_message)
        await callback.answer("–£–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

        # –£–¥–∞–ª—è–µ–º –∏–∑ Supabase
        supabase.table("calendar_events").delete().eq("appointment_id", meeting_id).execute()
        supabase.table("appointments").delete().eq("id", meeting_id).execute()

        await callback.message.edit_text("‚ùå –í—Å—Ç—Ä–µ—á–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        await callback.answer("–£–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

@dp.message(InviteParticipant.waiting_for_email)
async def handle_email_input(message: types.Message, state: FSMContext):
    email = message.text.strip()

    # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ email
    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        return await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")

    data = await state.get_data()
    appointment_id = data["appointment_id"]

    try:
        appointment = supabase.table("appointments").select("*").eq("id", appointment_id).execute().data[0]
        dt = datetime.datetime.fromisoformat(appointment["meeting_date_time"])
        title = appointment.get("title", "–í—Å—Ç—Ä–µ—á–∞")
        description = f"–í—Å—Ç—Ä–µ—á–∞ –ø–æ —Ç–µ–º–µ: {title}"

        moscow_tz = pytz.timezone("Europe/Moscow")
        moscow_dt = dt.astimezone(moscow_tz)
        start = moscow_dt.strftime("%Y%m%dT%H%M%S")

        end = (dt + datetime.timedelta(hours=1)).strftime("%Y%m%dT%H%M%S")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—Å—ã–ª–∫–∏
        import urllib.parse
        formatted_dt = dt.strftime("%Y-%m-%d %H:%M")
        moscow_tz = pytz.timezone("Europe/Moscow")
        moscow_dt = dt.astimezone(moscow_tz)
        start = moscow_dt.strftime("%Y%m%dT%H%M%S")

        # –°—Å—ã–ª–∫–∞ —Å —Ç–æ—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞—á–∞–ª–∞ (–±–µ–∑ end)
        gcal_link = (
            "https://calendar.google.com/calendar/render?action=TEMPLATE"
            f"&text={urllib.parse.quote(title)}"
            f"&details={urllib.parse.quote(description)}"
            f"&dates={start}/{start}"
            f"&ctz=Europe/Moscow"
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
        email_body = (
            f"–í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –Ω–∞ –≤—Å—Ç—Ä–µ—á—É:\n\n"
            f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {formatted_dt}\n"
            f"üìù –¢–µ–º–∞: {title}\n\n"
            f"üëâ [–î–æ–±–∞–≤–∏—Ç—å –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å]({gcal_link})"
        )


        try:
            import urllib.parse

            moscow_dt = dt.astimezone(pytz.timezone("Europe/Moscow"))
            formatted_dt = moscow_dt.strftime("%Y-%m-%d %H:%M")
            moscow_tz = pytz.timezone("Europe/Moscow")
            moscow_dt = dt.astimezone(moscow_tz)
            start = moscow_dt.strftime("%Y%m%dT%H%M%S")

            gcal_link = (
                "https://calendar.google.com/calendar/render?action=TEMPLATE"
                f"&text={urllib.parse.quote(title)}"
                f"&details={urllib.parse.quote(description)}"
                f"&dates={start}/{start}"
                f"&ctz=Europe/Moscow"
            )

            # –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
            body_text = (
                f"–í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –Ω–∞ –≤—Å—Ç—Ä–µ—á—É:\n\n"
                f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {formatted_dt}\n"
                f"üìù –¢–µ–º–∞: {title}\n\n"
                f"üëâ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å: {gcal_link}"
            )

            # HTML-–≤–µ—Ä—Å–∏—è –ø–∏—Å—å–º–∞
            body_html = (
                f"<p>–í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –Ω–∞ –≤—Å—Ç—Ä–µ—á—É:</p>"
                f"<p><b>üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {formatted_dt}<br>"
                f"<b>üìù –¢–µ–º–∞:</b> {title}</p>"
                f"<p><a href='{gcal_link}'>üëâ –î–æ–±–∞–≤–∏—Ç—å –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å</a></p>"
            )

            await send_email_invite_with_image(
                to_email=email,
                subject=f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É: {title}",
                body_text=(
                    f"<p>üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {formatted_dt}<br>"
                    f"üìù <b>–¢–µ–º–∞:</b> {title}</p>"
                    f"<p>üëâ <a href='{gcal_link}'>–î–æ–±–∞–≤–∏—Ç—å –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å</a></p>"
                ),
                image_path="invite_email.jpg"
            )

            await message.answer("‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ email!", reply_markup=main_menu)
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {e}", reply_markup=main_menu)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
    await state.clear()

import ssl
import certifi
import aiosmtplib
from email.message import EmailMessage


from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
import ssl
import certifi
import aiosmtplib
import os

async def send_email_invite_with_image(to_email: str, subject: str, body_text: str, image_path: str):
    smtp_email = os.getenv("SMTP_EMAIL")
    smtp_password = os.getenv("SMTP_PASSWORD")

    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∏—Å—å–º–∞
    msg = MIMEMultipart("related")
    msg["From"] = smtp_email
    msg["To"] = to_email
    msg["Subject"] = subject

    # HTML-–≤–µ—Ä—Å–∏—è –ø–∏—Å—å–º–∞
    html = f"""
    <html>
        <body>
            <p>{body_text.replace('\n', '<br>')}</p>
            <img src="cid:image1" width="400"/>
        </body>
    </html>
    """

    # –î–æ–±–∞–≤–ª—è–µ–º HTML –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —á–∞—Å—Ç—å
    alternative = MIMEMultipart("alternative")
    alternative.attach(MIMEText(html, "html"))
    msg.attach(alternative)

    # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    with open(image_path, "rb") as f:
        img = MIMEImage(f.read())
        img.add_header("Content-ID", "<image1>")
        img.add_header("Content-Disposition", "inline", filename="invite.jpg")
        msg.attach(img)

    # –û—Ç–ø—Ä–∞–≤–∫–∞
    context = ssl.create_default_context(cafile=certifi.where())
    await aiosmtplib.send(
        msg,
        hostname="smtp.gmail.com",
        port=587,
        start_tls=True,
        username=smtp_email,
        password=smtp_password,
        tls_context=context,
    )

# === –£–¥–∞–ª–µ–Ω–∏–µ –ö–∞–ª–µ–Ω–¥–∞—Ä—è ===
@dp.message(F.text.lower() == "—É–¥–∞–ª–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def start_calendar_delete(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    calendars = supabase.table("settings").select("*").eq("telegram_id", user_id).execute().data

    if not calendars:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_menu)

    await state.set_state(EditCalendarName.delete_choose)
    await state.update_data(calendar_list=calendars)

    buttons = [[KeyboardButton(text=c["calendar_name"])] for c in calendars]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons + [[KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=keyboard)
@dp.message(EditCalendarName.delete_choose)
async def delete_selected_calendar(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    selected_name = message.text.strip()
    data = await state.get_data()

    for calendar in data["calendar_list"]:
        if calendar["calendar_name"].lower() == selected_name.lower():
            supabase.table("settings").delete().match({
                "telegram_id": user_id,
                "calendar_id": calendar["calendar_id"]
            }).execute()

            await message.answer(f"‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å '{selected_name}' —É–¥–∞–ª—ë–Ω.", reply_markup=main_menu)
            return await state.clear()

    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    logging.basicConfig(level=logging.INFO)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())